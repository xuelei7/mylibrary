// ラムダ式
// [キャプチャリスト](パラメータリスト) mutable 例外仕様 属性 -> 戻り値の型 { 関数の本体 }

auto plus = [](int a, int b) { return a + b; };
int result = plus(2, 3); // result == 5

struct F {
    auto operator()(int a, int b) const -> decltype(a + b)
    {
        return a + b;
    }
};


void f()
{
    int x = 3;

    // この時点で見える自動変数を参照でキャプチャし、
    // 参照した変数xを書き換える
    auto f = [&] { x = 1; };

    // 個別にキャプチャ方法を指定する場合は、
    // 以下のように、&の次に変数名を指定する
    // auto f = [&x] { x = 1; };

    f(); // x == 1
}

void g()
{
    int x = 3;

    // この時点で見える自動変数をコピーでキャプチャし、
    // コピーした変数xをラムダ式内で使用する
    auto f = [=] { return x + 1; };

    // 個別にキャプチャ方法を指定する場合は、
    // 以下のように、変数名を指定する
    // auto f = [x] { return x + 1; };

    int result = f(); // result == 4
}

// キャプチャリスト
// キャプチャ記法   説明
// [&]              デフォルトで環境にある変数を参照して、ラムダ式のなかで使用する
// [=]	            デフォルトで環境にある変数をコピーして、ラムダ式のなかで使用する
// [&x]	            変数xを参照して、ラムダ式のなかで使用する
// [x]	            変数xをコピーして、ラムダ式のなかで使用する
// [&, x]	        デフォルトで参照キャプチャ、変数xのみコピーして、ラムダ式のなかで使用する
// [=, &x]	        デフォルトでコピーキャプチャ、変数xのみ参照して、ラムダ式のなかで使用する
// [this]	        *thisのメンバを参照して、ラムダ式のなかで使用する
// [this, x]	    *thisのメンバを参照し、変数xのみコピーして、ラムダ式のなかで使用する


// コピーキャプチャした変数を書き換えたい場合は、ラムダ式のパラメータリストの後ろにmutableと記述する。
void h() {
    int rate = 2;
    auto f = [rate](int x) mutable -> int { return x * ++rate; }   // OK
}