// パズル
// 1 〜 9 の数字を 14 個組み合わせて完成させるパズルがあります。与えられた 13 個の数字にもうひとつ数字を付け加えて完成させます。

// パズルの完成条件は

// 同じ数字を２つ組み合わせたものが必ずひとつ必要です。
// 残りの12 個の数字は、３個の数字の組み合わせ４つです。
// ３個の数字の組み合わせ方は、同じ数字を３つ組み合わせたものか、または３つの連続する数字を組み合わせたものです。ただし、9 1 2 のような並びは連続する数字とは認められません。
// 同じ数字は4 回まで使えます。
// 13 個の数字からなる文字列を読み込んで、パズルを完成することができる数字を昇順に全て出力するプログラムを作成してください。なお、1〜9 のどの数字を付け加えてもパズルを完成させることができないときは 0 を出力してください。

// 例えば与えられた文字列が 3456666777999 の場合

// 「2」があれば、　234 567 666 77 999
// 「3」があれば、　33 456 666 777 999
// 「5」があれば、　345 567 666 77 999
// 「8」があれば、　345 666 678 77 999

// というふうに、2 3 5 8 のいずれかの数字が付け加えられるとパズルは完成します。「6」でも整いますが、5 回目の使用になるので、この例では使えないことに注意してください。

// Input
// 入力は複数のデータセットからなります。各データセットとして、13 個の数字が１行に与えられます。データセットの数は 50 を超えません。

// Output
// データセットごとに、パズルを完成させることができる数字を昇順に空白区切りで１行に出力します。

#include <bits/stdc++.h>
using namespace std;

bool kezi(int left, int *cnt) {
    if (left == 0) return 1;
    for (int i = 1; i <= 9; i++) {
        if (cnt[i] >= 3) {
            cnt[i] -= 3;
            if (kezi(left-1, cnt)) {
                cnt[i] += 3;
                return 1;
            }
            cnt[i] += 3;
        }
        if (i+2 <= 9 && cnt[i] > 0 && cnt[i+1] > 0 && cnt[i+2] > 0) {
            cnt[i]--;
            cnt[i+1]--;
            cnt[i+2]--;
            if (kezi(left-1, cnt)) {
                cnt[i]++;
                cnt[i+1]++;
                cnt[i+2]++;
                return 1;
            }
            cnt[i]++;
            cnt[i+1]++;
            cnt[i+2]++;
        }
    }
    return 0;
}

bool agari(int *cnt) {
    for (int i = 1; i <= 9; i++) {
        if (cnt[i] >= 2) {
            cnt[i] -= 2;
            if (kezi(4,cnt)) {
                cnt[i] += 2;
                return 1;
            }
            cnt[i] += 2;
        }
    }
    return 0;
}

int main() {
    string s;
    while (cin >> s) {
        vector<int> ans;
        int cnt[10] = {};
        for (int i = 0; i < 13; i++) cnt[s[i] - '0']++;
        for (int i = 1; i <= 9; i++) {
            if (cnt[i] == 4) continue;
            cnt[i]++;
            if (agari(cnt)) ans.push_back(i);
            cnt[i]--;
        } 
        if (ans.size() == 0) cout << 0 << endl;
        for (int i = 0; i < ans.size(); i++) cout << ans[i] << " \n"[i == ans.size()-1];
    }
    return 0;
}