// 格子上の経路
// 上から見ると図 1 のような形の格子状の広場があります。この格子の各辺に「壁」があるかないかを 0 と 1 の並びで表します。点 A に立って壁に右手をつき、壁に右手をついたまま、矢印の方向に歩き続けて再び点 A に戻ってくるまでの経路を出力するプログラムを作成してください。


// 図1

// Input
// 入力は９行からなり、以下の図 2 に示すように、壁がある場合を 1、ない場合を 0 として、以下の形式で与えられます。

// 1 行目は一番上の横線の壁の有無を左から 0 と 1 で表した文字列
// 2 行目はその下の縦線の壁の有無を左から0 と1 で表した文字列
// 3 行目は上から2 本目の横線の壁の有無を左から0 と1 で表した文字列
// ...
// 9 行目は一番下の横線の壁の有無を左から0 と1 で表した文字列

// 図2 (壁あるところを太線で表しています)　　(対応する数字のならび)

// ただし、図１の太線に示すように、点 A から右に 1 区画分は必ず壁があるものとします。すなわち、1 行目の 1 文字目は常に 1 です。

// Output
// 「図の左方向に一区画分進む」を 'L'、「図の右方向に一区画分進む」を 'R'、「図の上方向に一区画分進む」を 'U'、「図の下方向に一区画分進む」を 'D' で表わし、進む順に 'L', 'R', 'U', 'D' を１行に並べて出力します。

#include <bits/stdc++.h>
using namespace std;
int maze[9][9];
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};
string dir = "RDLU";
int main() {
    string s;
    for (int i = 0; i < 9; i++) {
        cin >> s;
        if (i & 1) {
            for (int j = 0; j < 5; j++) {
                if (s[j] == '1') maze[i][j*2] = 1;
            }
        } else {
            for (int j = 0; j < 4; j++) {
                if (s[j] == '1') maze[i][j*2+1] = 1;
            }
        }
    }
    // for (int i = 0; i < 9; i++) {
    //     for (int j = 0; j < 9; j++) {
    //         cout << maze[i][j];
    //     }
    //     cout << endl;
    // }
    int x = 0, y = 0, d = 0;
    string ans = "";
    while (1) {
        int next_d = (d + 3) % 4;
        for (int k = 0; k < 4; k++) {
            int td = (next_d + k) % 4;
            int tx = x + dx[td];
            int ty = y + dy[td];
            if (tx < 0 || ty < 0 || tx >= 9 || ty >= 9) continue;
            if (maze[ty][tx] == 1) {
                // cout << tx << "," << ty << ": " << x << " " << y << " " << d << " -> ";
                x += dx[td] * 2;
                y += dy[td] * 2;
                d = td;
                // cout << x << " " << y << " " << d << endl;
                ans = ans + dir[d];
                break;
            }
        }
        if (x == 0 && y == 0) break;
    }
    cout << ans << endl;
    return 0;
}