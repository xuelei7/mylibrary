// パティシエ
// ケーキ屋さんが、まちまちな大きさのロールケーキをたくさん作りました。あなたは、このケーキを箱に並べる仕事を任されました。

// ロールケーキはとてもやわらかいので、他のロールケーキが上に乗るとつぶれてしまいます。ですから、図(a) のように全てのロールケーキは必ず箱の底面に接しているように並べなければなりません。並べ替えると必要な幅も変わります。


// 図(a)

// 図(b)

// n 個のロールケーキの半径 r1, r2, ..., rn と箱の長さを読み込み、それぞれについて、箱の中にうまく収まるかどうか判定し、並べる順番を工夫すると箱に入る場合は "OK"、どう並べても入らない場合には "NA"を出力するプログラムを作成してください。

// ロールケーキの断面は円であり、箱の壁の高さは十分に高いものとします。 ただし、ロールケーキの半径は 3 以上 10 以下の整数とします。つまり、ケーキの半径に極端な差はなく、図(b) のように大きなケーキの間に小さなケーキがはまり込んでしまうことはありません。

// Input
// 入力は複数のデータセットからなります。各データセットは以下の形式で与えられます。

// W r1 r2 ... rn
// 最初に箱の長さを表す整数 W (1 ≤ W ≤ 1,000) が与えられます。 続いて、空白区切りで各ロールケーキの半径を表す整数 ri (3 ≤ ri ≤ 10) が与えられます。ケーキの個数 n は 12 以下です。

// データセットの数は 50 を超えません。

// Output
// データセットごとに OK または NA を１行に出力してください。

#include <bits/stdc++.h>
using namespace std;

int main() {
    string s;
    while (getline(cin,s)) {
        stringstream ss(s);
        double w;
        ss >> w;
        double r;
        vector<double> v;
        while (ss >> r) {
            v.push_back(r);
        }
        int n = v.size();
        double dp[1<<n][n],inf=1<<25;
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = inf;
            }
        }
        for (int i = 0; i < n; i++) dp[(1 << i)][i] = v[i];
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (((i>>j)&1) && !((i>>k)&1)) {
                        dp[i+(1<<k)][k] = min(dp[i+(1<<k)][k], dp[i][j] + sqrt((v[j]+v[k])*(v[j]+v[k]) - (v[j]-v[k])*(v[j]-v[k])));
                    }
                }
            }
        }
        bool f = (n==0);
        for (int i = 0; i < n; i++) {
            f |= (dp[(1<<n)-1][i] + v[i] <= w + 1e-7);
        }
        cout << (f? "OK":"NA") << endl;
    }
    return 0;
}