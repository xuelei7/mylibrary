// Property Distribution
// タナカ氏が HW アールの果樹園を残して亡くなりました。果樹園は東西南北方向に H×W の区画に分けられ、区画ごとにリンゴ、カキ、ミカンが植えられています。タナカ氏はこんな遺言を残していました。

// 果樹園は区画単位でできるだけ多くの血縁者に分けること。ただし、ある区画の東西南北どれかの方向にとなりあう区画に同じ種類の果物が植えられていた場合は、区画の境界が分からないのでそれらは 1 つの大きな区画として扱うこと。

// 例えば次のような 3 × 10 の区画であれば ('リ'はリンゴ、'カ'はカキ、'ミ'はミカンを表す)



// 同じ樹がある区画の間の境界を消すと次のようになり、



// 結局 10 個の区画、つまり 10 人で分けられることになります。

// 雪が降って区画の境界が見えなくなる前に分配を終えなくてはなりません。あなたの仕事は果樹園の地図をもとに分配する区画の数を決めることです。

// 果樹園の地図を読み込み、分配を受けられる血縁者の人数を出力するプログラムを作成してください。

// Input
// 複数のデータセットが与えられます。各データセットは空白で区切られた H, W (H,W ≤ 100) を含む行から始まり、続いて H×W の文字からなる H 行の文字列が与えられます。この文字列には、リンゴを表す '@'、カキを表す '#'、ミカンを表す '*'、の 3 文字しか現れません。

// 入力はゼロが２つの行で終わります。データセットの数は 20 を超えません。

// Output
// 各データセットごとに、分配を受ける人数を１行に出力してください。

#include <bits/stdc++.h>
using namespace std;

int h,w;
char maze[110][110];
bool used[110][110];
int dh[4] = {0,1,0,-1};
int dw[4] = {1,0,-1,0};
void dfs(int hh, int ww, char c) {
    for (int i = 0; i < 4; i++) {
        int th = hh + dh[i];
        int tw = ww + dw[i];
        if (th < 0 || th >= h || tw < 0 || tw >= w) continue;
        if (used[th][tw]) continue;
        if (maze[th][tw] != c) continue;
        used[th][tw] = 1;
        dfs(th,tw,c);
    }
}

int main() {
    while (cin >> h >> w) {
        if (h == 0 && w == 0) break;
        int ans = 0;
        for (int i = 0; i < h; i++) {
            memset(used[i], 0, sizeof(used[i]));
            cin >> maze[i];
        }
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (!used[i][j]) {
                    dfs(i,j,maze[i][j]);
                    ans++;
                }
            }
        }
        cout << ans << endl;
    }
    return 0;
}