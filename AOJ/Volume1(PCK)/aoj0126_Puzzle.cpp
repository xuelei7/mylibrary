// パズル
// たろう君は 9 × 9 のマス目に 1〜9 の数字を配置するパズルで遊んでいます。このパズルでは以下の規則で数字を配置しなければいけません。

// 同じ列に 1 つの数字はちょうど 1 回だけ現われる
// 同じ行に 1 つの数字はちょうど 1 回だけ現われる
// 二重線で区切られた 3 × 3 の各範囲には、1 つの数字はちょうど 1 回だけ現われる
// 例えば、下の図 1 はそのような規則を満たした配置の一つです。しかしたろう君は、図 2 のようによく規則に反した配置を作ってしまいます。左端の列に「2」が 2 回現われて、「1」が 1 回も現われず、左から2 番目の列に「1」が 2 回現われて、「2」が 1 回も現われていません。

	
// 図 1	図 2

// たろう君を助けるために、数字の配置を読み込んで、その配置が規則を満たしているかどうかを調べ、規則に反していたらその場所を出力するプログラムを作成してください。3 つの規則に照らして誤っている (2 回以上現れている) 数字の前には * (半角アスタリスク)を、誤っていない数字の前には空白を表示してください。

// Input
// 複数のデータセットが与えられます。最初の行にデータセットの数 n (n ≤ 20) が与えられます。各データセットとして、パズルの状態を示す 1 行 9 文字、9 行からなる数字列が与えられます。

// Output
// 各データセットについて以下を出力してください。

// 与えられた数字と * (半角アスタリスク)と空白。誤っている数字の前には *、誤っていない数字の前には半角空白を付加する。

// データセットの間に 1 行の空行を入れてください。

#include <bits/stdc++.h>
using namespace std;

int maze[10][10];
bool ok[10][10];

int main() {
    int n;
    cin >> n;
    for (int t = 0; t < n; t++) {
        if (t != 0) cout << endl;
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                cin >> maze[i][j];
                ok[i][j] = 1;
            }
        }

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                for (int k = j+1; k < 9; k++) {
                    if (maze[i][j] == maze[i][k]) {
                        ok[i][j] = ok[i][k] = 0;
                    }
                    if (maze[j][i] == maze[k][i]) {
                        ok[j][i] = ok[k][i] = 0;
                    }
                }
            }
        }
        for (int i = 0; i < 9; i += 3) {
            for (int j = 0; j < 9; j+= 3) {
                for (int pi = 0; pi < 3; pi++) {
                    for (int pj = 0; pj < 3; pj++) {
                        for (int qi = 0; qi < 3; qi++) {
                            for (int qj = 0; qj < 3; qj++) {
                                if (pi == qi && pj == qj) continue;
                                if (maze[i+pi][j+pj] == maze[i+qi][j+qj]) {
                                    ok[i+pi][j+pj] = ok[i+qi][j+qj] = 0;
                                }
                            }
                        }
                    }
                }
            }
        }
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                cout << (ok[i][j]?' ':'*') << maze[i][j];
            }
            cout << endl;
        }
    }
    return 0;
}