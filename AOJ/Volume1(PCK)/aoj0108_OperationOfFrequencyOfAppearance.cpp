// 出現頻度操作
// 有限数列の変換操作に出現頻度操作というものがあります。数列 
// S={s1,s2,...sn} の変換結果は同じ長さの数列となります。その結果を C={c1,c2,...,cn} とすると、 
// ci は数列 S における si の個数を表します。

// 例えば S={3,4,1,5,9,2,6,5,3} ならば C=2,1,1,2,1,1,1,2,2 となります。さらにこの数列 C に出現頻度操作を行うと P={4,5,5,4,5,5,5,4,4} を得ます。この数列は出現頻度操作で変わることがありません。このような数列 P を数列 S の不動点と呼びます。どのような数列に対しても出現頻度操作を繰り返せば、その不動点を求めることが出来るということが知られています。

// 下の例は出現頻度操作の手順を示したものです。1 行目を数列 S 、2 行目を数列 C、最終行を数列 P とします。数列 S の最初の要素(s1=2) と同じ数は 3 個あるので数列 C の最初の要素 c1 は 3、次の要素 (s2=7) と同じ数は 2 個あるので c2=2、といった具合に個数を数え ci を求めていきます。


// 数列の長さ 
// n と数列 S を入力し、不動点の数列 P および、P を得るために実行した出現頻度操作の最小の回数を出力するプログラムを作成してください。

// Input
// 複数のデータセットが与えられます。各データセットは以下の形式で与えられます。

// n
// s1 s2 ... sn

// 1 行目に数列の長さを表す整数 n (n≤12) が与えられます。２行目に数列 S の要素を表す整数　si (1≤si≤100) が空白区切りで与えられます。

// 入力は０一つの行で終わります。データセットの数は 200 を超えません。

// Output
// 各データセットについて、１行目に出現頻度操作の最小の実行回数(整数)、２行目に対応する不動点の数列 P の要素 p1, p2, ..., pn を空白区切りで出力してください。

#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    while (cin >> n) {
        if (n == 0) break;
        int p[12];
        map<int,int> mp;
        for (int i = 0; i < n; i++) cin >> p[i];
        int cnt = 0;
        while (1) {
            bool change = 0;
            for (int i = 0; i < n; i++) {
                mp[p[i]]++;
            }
            for (int i = 0; i < n; i++) {
                if (mp[p[i]] != p[i]) change = 1;
                p[i] = mp[p[i]];
            }
            mp.clear();
            if (!change) break;
            cnt++;
        }
        cout << cnt << endl;
        for (int i = 0; i < n; i++) cout << p[i] << " \n"[i == n - 1];
    }
    return 0;
}