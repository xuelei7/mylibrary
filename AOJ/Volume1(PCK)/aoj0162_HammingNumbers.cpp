// ハミング数
// 1 に 2, 3, 5 を何回か (0 回以上) かけ算して得られる数をハミング数 (Hamming numbers) と呼びます。例えば、

// 1
// 1 × 2 × 2 = 4
// 1 × 2 × 2 × 3 × 5 × 5 = 300
// などはハミング数ですが、11, 13, 14 などはハミング数ではありません。

// ハミング数はどれも 60 のべき乗を割り切る(例えば、54 は 603 = 21600 を割り切る) ので、時刻など 60 進法の計算には都合の良い数として昔から知られていました。また、楽器の調律に用いる音階の一つである純正律では、音の周波数の比が 24, 27, 30, 32, 36, 40, 45, 48 というハミング数からなる数列になります。

// 整数 m、n を入力とし、m 以上 n 以下のハミング数の個数を出力するプログラムを作成してください。

// Input
// 複数のデータセットの並びが入力として与えられます。入力の終わりはゼロひとつの行で示されます。

// 各データセットとして、２つの整数 m と n (1 ≤ m, n ≤ 1000000, m ≤ n) が空白区切りで１行に与えられます。

// データセットの数は 20 を超えません。

// Output
// データセットごとに m 以上 n 以下のハミング数の個数を１行に出力します。

#include <bits/stdc++.h>
using namespace std;

bool ok[2000010];

void f(int k) {
    if (k > 2000000) return;
    ok[k] = 1;
    f(k*2);
    f(k*3);
    f(k*5);
}

int main() {
    f(1);
    vector<int> v;
    for (int i = 1; i <= 2000000; i++) {
        if (ok[i]) v.push_back(i);
    }
    int m,n;
    while (cin >> m) {
        if (m == 0) break;
        cin >> n;
        cout << (upper_bound(v.begin(),v.end(),n) - lower_bound(v.begin(),v.end(),m)) << endl;
    }
    return 0;
}