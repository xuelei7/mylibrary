// 魔方陣
// n × n の正方形のマス目の中に数字の１から n × n が一つずつ入っていて、縦のどの列のマス目の和も、横のどの列のマス目の和も対角線のマス目の和も等しいものを魔方陣といいます。

// 一辺のマスの個数が奇数の魔方陣の作り方には以下の方法があります。

// 中央のマス目のちょうど一つ下のマス目に１を入れる。
// 次の数字を右斜め下のマス目に入れる。
// ただし、数字を入れようとしたマス目が正方形からはみ出している場合、すでに数字が埋まっている場合は以下の方法に従って数字を入れるマス目を探す。
// 右にはみ出した場合には、同じ行の左はしに、左にはみ出した場合には、同じ行の右はしに、下にはみ出した場合には、同じ列の一番上に数字を入れる。
// 数字を入れようとしたマス目が埋まっているときには、その埋まっているマス目の左斜め下のマス目に入れる。
// 全てのマス目が埋まるまで２を繰り返す。
// この方法に従って、一辺のマス目の個数 n を入力として、その大きさの魔方陣を出力するプログラムを作成して下さい。ただし、n は 3 以上 15 以下の奇数とします。マス目に入る各数字は右詰 4 桁で出力してください。

// 入力
// 複数の入力が与えられます。各入力で n （正の整数）が１行に与えられます。入力は 0 で終了します。入力の数は 10 を超えません。

// 出力
// 各入力に対して n × n の魔方陣を出力して下さい。

#include <bits/stdc++.h>
using namespace std;

int maze[20][20];
int n;

void f(int h, int w, int k) {

    f(h,w,k+1);
}

int main() {
    while (cin >> n) {
        if (n == 0) break;
        fill(maze[0],maze[19],0);
        int h = n / 2 + 1, w = n / 2;
        for (int k = 1; k <= n * n; k++) {
            maze[h][w] = k;
            h = (h + 1) % n;
            w = (w + 1) % n;
            if (maze[h][w] != 0) {
                h = (h + 1) % n;
                w = (w + n - 1) % n;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cout << setw(4) << maze[i][j];
            }
            cout << endl;
        }
    }
    return 0;
}