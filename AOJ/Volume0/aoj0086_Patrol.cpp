// パトロール
// 文久２（1862）年、会津の殿様が京都守護職を命ぜられました。京都守護職とは治安の悪化した幕末の京都を守る大切な役目です。幕府や他の藩と分担して市中をパトロールしなければなりません。ところがいざ分担ルートを決める段になって、家臣の中でも有名な頑固者の古老から以下のような注文がつきました。



// 大変なことになりました。殿様といえどもこの家臣の言い分を無視するわけにはいきません。分担ルートの選択によっては、「武士の面目が立たない」ということになってしまいます。

// ということで、スタート地点、ゴール地点、交差点の情報を入力として、上の三つの条件を満たすかどうかを判定するプログラムを作って、殿様に献上してください。

// スタート地点を 1、ゴール地点を2、その他の交差点を 3 以上の整数で表します。1つの道路は、その道が結ぶ1組の交差点番号で表します。なお、交差点の数は 100 以下とし、全ての交差点からスタート地点およびゴール地点への経路がそれぞれ一つ以上あるものとします。

// 入力
// 複数のデータセットが与えられます。各データセットは以下の形式で与えられます。

// a1 b1
// a2 b2
// ：
// ：
// 0 0
// 各行の２つの整数は、交差点 ai と交差点 bi とをつなぐ道路が存在することを示します。 ai と bi がともに 0 のとき交差点情報の入力の終わりを示します。

// データセットの数は50を超えません。

// 出力
// 各データセットに対して、武士の面目が立つ場合（三つの条件を満たす場合）OK、それ以外の場合（三つの条件を満たさない場合）NG と１行に出力してください。

#include <bits/stdc++.h>
using namespace std;

int main() {
    int a,b;
    map<int,int> mp;
    while (cin >> a >> b) {
        if (a == 0 && b == 0) {
            bool ok = 1;
            if ((mp[1] & 1 && mp[2] & 1)) ok = 1;
            else ok = 0;
            for (auto p:mp) {
                if (p.first == 1 || p.first == 2) continue;
                if (p.second & 1) {
                    ok = 0;
                    break;
                }
            }
            cout << (ok?"OK":"NG") << endl;
            mp.clear();
        } else {
            mp[a]++;
            mp[b]++;
        }        
    }
    return 0;
}